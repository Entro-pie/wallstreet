{"version":3,"sources":["Select.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","Select","state","inputValue","symbols","selected","value","label","textChange","setState","techFilter","path","map","x","toString","props","history","push","handler","length","this","filter","i","toLowerCase","startsWith","axios","get","data","location","pathname","result","slice","split","promiseOptions","a","filterSymbolss","isMulti","cacheOptions","placeholder","onChange","defaultOptions","loadOptions","Component","withRouter","ReactTable","columns","defaultColumn","React","useMemo","width","useTable","initialState","sortBy","id","desc","useFlexLayout","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","index","getCellProps","key","red","peCellColor","c","v","style","color","simpleColor","includes","Header","accessor","maxWidth","Cell","original","change","symbol","latestPrice","changeDiff","peRatio","parseFloat","toFixed","priceFcfRatio","psRatio","shortFloat","salesPast5Y","replace","salesQoQ","perfYear","fiveYearsPerf","tenYearsPerf","sma200","cap","toHumanString","defaultPageSize","App","useState","setResult","fetchData","array","getAllUrls","urls","Promise","all","url","fetch","then","response","json","console","log","API","responses","yahooResult","len","quote","q","parseInt","hit","y","toPerf","price","changePercent","week52Low","week52High","prevClose","useEffect","whyDidYouRender","Boolean","window","hostname","match","ReactDOM","base","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.39f6c22e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport AsyncSelect from \"react-select/async\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n    margin-left: 10%;\n    margin-right: 10%;\n    margin-top: 20px;\n`;\n\nclass Select extends Component<*, State> {\n    state = {\n        inputValue: null,\n        symbols: null,\n        selected: { value: null, label: null }\n    };\n\n    async filterSymbolss(inputValue: string) {\n        if (inputValue.length < 1) return false;\n        return this.state.symbols.filter(i =>\n            i.label.toLowerCase().startsWith(inputValue.toLowerCase())\n        );\n    }\n\n    async componentDidMount() {\n        const symbols = (\n            await axios.get(\"https://finance.beuke.org/symbols\")\n        ).data.map(i => ({ value: i, label: i }));\n        this.setState({ symbols: symbols });\n\n        const path = this.props.location.pathname;\n\n        const result = path.slice(1)\n            ? path\n                  .slice(1)\n                  .split(\",\")\n                  .map(x => ({ value: x, label: x }))\n            : [];\n\n        this.setState({\n            techFilter: result.length < 1 ? [] : result\n        });\n    }\n\n    textChange = inputValue => {\n        this.setState({ techFilter: inputValue });\n        const path = inputValue ? inputValue.map(x => x.value).toString() : \"\";\n        this.props.history.push(path);\n        if (inputValue) {\n            this.props.handler(inputValue.map(x => x.value));\n        }\n    };\n\n    render() {\n        const promiseOptions = async inputValue =>\n            await this.filterSymbolss(inputValue);\n\n        return (\n            <Styles>\n                <AsyncSelect\n                    isMulti\n                    cacheOptions\n                    value={this.state && this.state.techFilter}\n                    placeholder=\"Stock Symbols\"\n                    onChange={(...args) => this.textChange(...args)}\n                    defaultOptions\n                    loadOptions={promiseOptions}\n                />\n            </Styles>\n        );\n    }\n}\n\nexport default withRouter(Select);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useFlexLayout, useSortBy } from \"react-table\";\nimport { toHumanString } from \"human-readable-numbers\";\nimport { withRouter } from \"react-router-dom\";\n\nconst Styles = styled.div`\n    margin-left: 2%;\n    margin-right: 2%;\n    margin-top: 20px;\n\n    .table {\n        border: 0px solid #000;\n    }\n\n    .header {\n        font-weight: bold;\n    }\n\n    .rows {\n        overflow-y: auto;\n    }\n\n    .row {\n        border-bottom: 1px solid #000;\n        height: 32px;\n\n        &.header-group {\n            :first-child {\n                border: 0;\n            }\n        }\n\n        &.body {\n            :last-child {\n                border: 0;\n            }\n        }\n    }\n\n    .cell {\n        height: 100%;\n        line-height: 30px;\n        border-right: 0px solid #000;\n        text-align: left;\n\n        :nth-child(9) {\n        }\n    }\n`;\n\nfunction ReactTable({ columns, data, props }) {\n    const defaultColumn = React.useMemo(\n        () => ({\n            width: 100\n        }),\n        []\n    );\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            initialState: {\n                sortBy: [\n                    {\n                        id: \"cap\",\n                        desc: true\n                    }\n                ]\n            }\n        },\n        useFlexLayout,\n        useSortBy\n    );\n\n    return (\n        <div {...getTableProps()} className=\"table\">\n            <div>\n                {headerGroups.map(headerGroup => (\n                    <div\n                        {...headerGroup.getHeaderGroupProps()}\n                        className=\"row header-group\"\n                    >\n                        {headerGroup.headers.map(column => (\n                            <div\n                                {...column.getHeaderProps(\n                                    column.getSortByToggleProps()\n                                )}\n                                className=\"cell header\"\n                            >\n                                {column.render(\"Header\")}\n                                <span>\n                                    {column.isSorted\n                                        ? column.isSortedDesc\n                                            ? \"\"\n                                            : \"\"\n                                        : \"\"}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"rows\" {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <div {...row.getRowProps()} className=\"row body\">\n                            {row.cells.map((cell, index) => (\n                                <div\n                                    {...cell.getCellProps()}\n                                    key={index}\n                                    className={\"cell\"}\n                                >\n                                    {cell.render(\"Cell\")}\n                                </div>\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nconst red = \"#D50000\";\nconst green = \"#228B53\";\n\nfunction cellColor(c, v) {\n    return <div style={{ color: c.includes(\"-\") ? red : green }}>{v}</div>;\n}\n\nfunction peCellColor(c, v) {\n    switch (true) {\n        case c < 0 || c > 40:\n            return <div style={{ color: red }}>{v}</div>;\n        case c < 10:\n            return <div style={{ color: green }}>{v}</div>;\n        default:\n            return <div>{v}</div>;\n    }\n}\n\nfunction Table(props) {\n    const humanString = i => (i ? toHumanString(i).replace(\"G\", \"B\") : null);\n\n    const simpleColor = i =>\n        i === \"-\" ? (\n            i\n        ) : i.includes(\"-\") ? (\n            <div style={{ color: red }}>{i}</div>\n        ) : (\n            <div style={{ color: green }}>+{i}</div>\n        );\n\n    const shortColor = i =>\n        i.length > 5 ? <div style={{ color: red }}>{i}</div> : <div>{i}</div>;\n\n    const psColor = i =>\n        i === \"-\" ? (\n            i\n        ) : i > 40 ? (\n            <div style={{ color: red }}>{i}</div>\n        ) : (\n            <div>{i}</div>\n        );\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: \"  \",\n                columns: [\n                    {\n                        Header: \"Symbol\",\n                        accessor: \"symbol\", // accessors are required for sort\n                        maxWidth: 80,\n                        Cell: ({ row: { original } }) =>\n                            cellColor(original.change, original.symbol)\n                    },\n                    {\n                        Header: \"Price\",\n                        maxWidth: 70,\n                        Cell: ({\n                            row: {\n                                original: { latestPrice }\n                            }\n                        }) => latestPrice\n                    },\n                    {\n                        Header: \"Change\",\n                        accessor: \"change\",\n                        maxWidth: 70,\n                        Cell: ({\n                            row: {\n                                original: { changeDiff }\n                            }\n                        }) => simpleColor(changeDiff)\n                    },\n                    {\n                        Header: \"Change%\",\n                        accessor: \"changePercent\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { change }\n                            }\n                        }) => simpleColor(change)\n                    },\n                    {\n                        Header: \"P/E\",\n                        accessor: \"peRatio\",\n                        maxWidth: 55,\n                        Cell: ({\n                            row: {\n                                original: { peRatio }\n                            }\n                        }) =>\n                            peCellColor(\n                                peRatio,\n                                peRatio !== \"-\"\n                                    ? parseFloat(peRatio).toFixed(1)\n                                    : \"-\"\n                            )\n                    },\n                    {\n                        Header: \"P/FCF\",\n                        accessor: \"priceFcfRatio\",\n                        maxWidth: 55,\n                        Cell: ({\n                            row: {\n                                original: { priceFcfRatio }\n                            }\n                        }) =>\n                            peCellColor(\n                                priceFcfRatio - 10,\n                                priceFcfRatio !== \"-\"\n                                    ? parseFloat(priceFcfRatio).toFixed(1)\n                                    : \"-\"\n                            )\n                    },\n                    {\n                        Header: \"P/S\",\n                        accessor: \"priceToSales\",\n                        maxWidth: 55,\n                        Cell: ({\n                            row: {\n                                original: { psRatio }\n                            }\n                        }) =>\n                            psColor(\n                                psRatio !== \"-\"\n                                    ? parseFloat(psRatio).toFixed(1)\n                                    : \"-\"\n                            )\n                    },\n                    {\n                        Header: \"Short\",\n                        accessor: \"shortFloat\",\n                        maxWidth: 70,\n                        Cell: ({\n                            row: {\n                                original: { shortFloat }\n                            }\n                        }) => shortColor(shortFloat)\n                    },\n                    {\n                        Header: \"Sales5Y/Y\",\n                        accessor: \"salesPast5Y\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { salesPast5Y }\n                            }\n                        }) => simpleColor(salesPast5Y.replace(\"0%\", \"%\"))\n                    },\n                    {\n                        Header: \"SalesQ/Q\",\n                        accessor: \"salesQoQ\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { salesQoQ }\n                            }\n                        }) => simpleColor(salesQoQ.replace(\"0%\", \"%\"))\n                    },\n                    {\n                        Header: \"PerfY\",\n                        accessor: \"perfYear\",\n                        maxWidth: 65,\n                        Cell: ({\n                            row: {\n                                original: { perfYear }\n                            }\n                        }) => simpleColor(perfYear)\n                    },\n                    {\n                        Header: \"Perf5Y\",\n                        accessor: \"fiveYearsPerf\",\n                        maxWidth: 65,\n                        Cell: ({\n                            row: {\n                                original: { fiveYearsPerf }\n                            }\n                        }) => simpleColor(fiveYearsPerf)\n                    },\n                    {\n                        Header: \"Perf10Y\",\n                        accessor: \"tenYearsPerf\",\n                        maxWidth: 65,\n                        Cell: ({\n                            row: {\n                                original: { tenYearsPerf }\n                            }\n                        }) => simpleColor(tenYearsPerf)\n                    },\n                    {\n                        Header: \"200DAvg\",\n                        accessor: \"sma200\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { sma200 }\n                            }\n                        }) => (sma200 ? simpleColor(sma200) : \"\")\n                    },\n                    {\n                        Header: \"Cap\",\n                        accessor: \"cap\",\n                        id: \"cap\",\n                        maxWidth: 60,\n                        Cell: ({\n                            row: {\n                                original: { cap }\n                            }\n                        }) => (cap ? humanString(cap) : \"-\")\n                    }\n                ]\n            }\n        ],\n        []\n    );\n\n    return (\n        <div>\n            <Styles>\n                <ReactTable\n                    columns={columns}\n                    defaultPageSize={10}\n                    data={props.data}\n                />\n            </Styles>\n        </div>\n    );\n}\n\nexport default withRouter(Table);\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Select from \"./Select\";\nimport Table from \"./Table\";\n\nfunction App(props) {\n    const [result, setResult] = useState([]);\n\n    const fetchData = async array => {\n        if (array.length < 1) {\n            setResult([]);\n            return;\n        }\n\n        const production = true;\n        const getAllUrls = async urls => {\n            try {\n                var data = await Promise.all(\n                    urls.map(url =>\n                        fetch(url).then(response => response.json())\n                    )\n                );\n\n                return data;\n            } catch (error) {\n                console.log(error);\n\n                throw error;\n            }\n        };\n\n        const API = production\n            ? \"https://finance.beuke.org\"\n            : \"http://localhost:3000\";\n\n        const responses = await getAllUrls([\n            API + `/chart/batch/${array.toString()}`,\n            API + `/quote/batch/${array.toString()}`\n        ]);\n\n        const yahooResult = responses[0].map(x => {\n            const len = x.quote.length;\n            const q = x.quote;\n            return {\n                symbol: x.symbol,\n                fiveYearsPerf: q && len > 19 && x.quote[parseInt(len / 2)],\n                tenYearsPerf: q && len > 39 && x.quote[0]\n            };\n        });\n\n        setResult(\n            responses[1].map(x => {\n                const hit = yahooResult.filter(y => y.symbol === x.symbol)[0];\n\n                const toPerf = x => y =>\n                    y ? ((x / y) * 100).toFixed(0) + \"%\" : \"-\";\n\n                return {\n                    latestPrice: x.price,\n                    tenYearsPerf: hit ? toPerf(x.price)(hit.tenYearsPerf) : \"-\",\n                    fiveYearsPerf: hit\n                        ? toPerf(x.price)(hit.fiveYearsPerf)\n                        : \"-\",\n                    changePercent: x.change,\n                    week52Low: 0,\n                    week52High: 0,\n                    changeDiff: (x.price - x.prevClose).toFixed(2).toString(),\n                    ...x,\n                    cap:\n                        x.cap !== \"-\"\n                            ? parseFloat(x.cap.slice(0, -1)) * 1000000000\n                            : null\n                };\n            })\n        );\n    };\n\n    const path = props.location.pathname;\n\n    let array = path.slice(1) ? path.slice(1).split(\",\") : [];\n\n    useEffect(() => {\n        if (array.length > 1) fetchData(array);\n    }, []); // eslint-disable-line\n\n    return (\n        <div>\n            <Select handler={fetchData} />\n            <Table data={result} />\n        </div>\n    );\n}\n\nexport default withRouter(App);\n\nApp.whyDidYouRender = true;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter base=\"/wallstreet\">\n        <Route path=\"/\" component={App} />\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}