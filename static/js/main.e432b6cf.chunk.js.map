{"version":3,"sources":["App.js","Select.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","Table","columns","data","defaultColumn","props","React","useMemo","width","useTable","initialState","sortBy","id","desc","useFlexLayout","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","index","getCellProps","key","red","peCellColor","c","v","style","color","withRouter","simpleColor","includes","Header","accessor","maxWidth","Cell","original","change","symbol","latestPrice","changeDiff","peRatio","parseFloat","toFixed","priceFcfRatio","psRatio","shortFloat","length","salesPast5Y","replace","salesQoQ","perfYear","fiveYearsPerf","tenYearsPerf","sma200","cap","toHumanString","useState","result","setResult","fetchData","array","a","production","fetch","toString","yahoo","json","x","len","quote","q","parseInt","abc","response","hit","filter","y","toPerf","price","changePercent","week52Low","week52High","prevClose","slice","history","useHistory","path","location","pathname","split","listen","action","useEffect","defaultPageSize","Select","state","inputValue","symbols","selected","value","label","handleInputChange","newValue","setState","textChange","techFilter","push","this","toLowerCase","startsWith","axios","get","promiseOptions","filterSymbolss","isMulti","cacheOptions","placeholder","onChange","defaultOptions","loadOptions","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e432b6cf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useFlexLayout, useSortBy } from \"react-table\";\nimport { toHumanString } from \"human-readable-numbers\";\nimport { withRouter, useHistory } from \"react-router-dom\";\n\nconst Styles = styled.div`\n    margin-left: 2%;\n    margin-right: 2%;\n    margin-top: 20px;\n\n    .table {\n        border: 0px solid #000;\n    }\n\n    .header {\n        font-weight: bold;\n    }\n\n    .rows {\n        overflow-y: auto;\n    }\n\n    .row {\n        border-bottom: 1px solid #000;\n        height: 32px;\n\n        &.header-group {\n            :first-child {\n                border: 0;\n            }\n        }\n\n        &.body {\n            :last-child {\n                border: 0;\n            }\n        }\n    }\n\n    .cell {\n        height: 100%;\n        line-height: 30px;\n        border-right: 0px solid #000;\n        text-align: left;\n\n        :nth-child(9) {\n        }\n    }\n`;\n\nfunction Table({ columns, data, props }) {\n    const defaultColumn = React.useMemo(\n        () => ({\n            width: 100\n        }),\n        []\n    );\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            initialState: {\n                sortBy: [\n                    {\n                        id: \"cap\",\n                        desc: true\n                    }\n                ]\n            }\n        },\n        useFlexLayout,\n        useSortBy\n    );\n\n    return (\n        <div {...getTableProps()} className=\"table\">\n            <div>\n                {headerGroups.map(headerGroup => (\n                    <div\n                        {...headerGroup.getHeaderGroupProps()}\n                        className=\"row header-group\"\n                    >\n                        {headerGroup.headers.map(column => (\n                            <div\n                                {...column.getHeaderProps(\n                                    column.getSortByToggleProps()\n                                )}\n                                className=\"cell header\"\n                            >\n                                {column.render(\"Header\")}\n                                <span>\n                                    {column.isSorted\n                                        ? column.isSortedDesc\n                                            ? \"\"\n                                            : \"\"\n                                        : \"\"}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"rows\" {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <div {...row.getRowProps()} className=\"row body\">\n                            {row.cells.map((cell, index) => (\n                                <div\n                                    {...cell.getCellProps()}\n                                    key={index}\n                                    className={\"cell\"}\n                                >\n                                    {cell.render(\"Cell\")}\n                                </div>\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nconst red = \"#D50000\";\nconst green = \"#228B53\";\n\nfunction cellColor(c, v) {\n    return <div style={{ color: c.includes(\"-\") ? red : green }}>{v}</div>;\n}\n\nfunction peCellColor(c, v) {\n    switch (true) {\n        case c < 0 || c > 40:\n            return <div style={{ color: red }}>{v}</div>;\n        case c < 10:\n            return <div style={{ color: green }}>{v}</div>;\n        default:\n            return <div>{v}</div>;\n    }\n}\n\nfunction App() {\n    const humanString = i => (i ? toHumanString(i).replace(\"G\", \"B\") : null);\n\n    const simpleColor = i =>\n        i === \"-\" ? (\n            i\n        ) : i.includes(\"-\") ? (\n            <div style={{ color: red }}>{i}</div>\n        ) : (\n            <div style={{ color: green }}>+{i}</div>\n        );\n\n    const shortColor = i =>\n        i.length > 5 ? <div style={{ color: red }}>{i}</div> : <div>{i}</div>;\n\n    const psColor = i =>\n        i === \"-\" ? (\n            i\n        ) : i > 40 ? (\n            <div style={{ color: red }}>{i}</div>\n        ) : (\n            <div>{i}</div>\n        );\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: \"  \",\n                columns: [\n                    {\n                        Header: \"Symbol\",\n                        accessor: \"symbol\", // accessors are required for sort\n                        maxWidth: 80,\n                        Cell: ({ row: { original } }) =>\n                            cellColor(original.change, original.symbol)\n                    },\n                    {\n                        Header: \"Price\",\n                        maxWidth: 70,\n                        Cell: ({\n                            row: {\n                                original: { latestPrice }\n                            }\n                        }) => latestPrice\n                    },\n                    {\n                        Header: \"Change\",\n                        accessor: \"change\",\n                        maxWidth: 70,\n                        Cell: ({\n                            row: {\n                                original: { changeDiff }\n                            }\n                        }) => simpleColor(changeDiff)\n                    },\n                    {\n                        Header: \"Change%\",\n                        accessor: \"changePercent\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { change }\n                            }\n                        }) => simpleColor(change)\n                    },\n                    {\n                        Header: \"P/E\",\n                        accessor: \"peRatio\",\n                        maxWidth: 55,\n                        Cell: ({\n                            row: {\n                                original: { peRatio }\n                            }\n                        }) =>\n                            peCellColor(\n                                peRatio,\n                                peRatio !== \"-\"\n                                    ? parseFloat(peRatio).toFixed(1)\n                                    : \"-\"\n                            )\n                    },\n                    {\n                        Header: \"P/FCF\",\n                        accessor: \"priceFcfRatio\",\n                        maxWidth: 55,\n                        Cell: ({\n                            row: {\n                                original: { priceFcfRatio }\n                            }\n                        }) =>\n                            peCellColor(\n                                priceFcfRatio - 10,\n                                priceFcfRatio !== \"-\"\n                                    ? parseFloat(priceFcfRatio).toFixed(1)\n                                    : \"-\"\n                            )\n                    },\n                    {\n                        Header: \"P/S\",\n                        accessor: \"priceToSales\",\n                        maxWidth: 55,\n                        Cell: ({\n                            row: {\n                                original: { psRatio }\n                            }\n                        }) =>\n                            psColor(\n                                psRatio !== \"-\"\n                                    ? parseFloat(psRatio).toFixed(1)\n                                    : \"-\"\n                            )\n                    },\n                    {\n                        Header: \"Short\",\n                        accessor: \"shortFloat\",\n                        maxWidth: 70,\n                        Cell: ({\n                            row: {\n                                original: { shortFloat }\n                            }\n                        }) => shortColor(shortFloat)\n                    },\n                    {\n                        Header: \"Sales5Y/Y\",\n                        accessor: \"salesPast5Y\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { salesPast5Y }\n                            }\n                        }) => simpleColor(salesPast5Y.replace(\"0%\", \"%\"))\n                    },\n                    {\n                        Header: \"SalesQ/Q\",\n                        accessor: \"salesQoQ\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { salesQoQ }\n                            }\n                        }) => simpleColor(salesQoQ.replace(\"0%\", \"%\"))\n                    },\n                    {\n                        Header: \"PerfY\",\n                        accessor: \"perfYear\",\n                        maxWidth: 65,\n                        Cell: ({\n                            row: {\n                                original: { perfYear }\n                            }\n                        }) => simpleColor(perfYear)\n                    },\n                    {\n                        Header: \"Perf5Y\",\n                        accessor: \"fiveYearsPerf\",\n                        maxWidth: 65,\n                        Cell: ({\n                            row: {\n                                original: { fiveYearsPerf }\n                            }\n                        }) => simpleColor(fiveYearsPerf)\n                    },\n                    {\n                        Header: \"Perf10Y\",\n                        accessor: \"tenYearsPerf\",\n                        maxWidth: 65,\n                        Cell: ({\n                            row: {\n                                original: { tenYearsPerf }\n                            }\n                        }) => simpleColor(tenYearsPerf)\n                    },\n                    {\n                        Header: \"200DAvg\",\n                        accessor: \"sma200\",\n                        maxWidth: 80,\n                        Cell: ({\n                            row: {\n                                original: { sma200 }\n                            }\n                        }) => (sma200 ? simpleColor(sma200) : \"\")\n                    },\n                    {\n                        Header: \"Cap\",\n                        accessor: \"cap\",\n                        id: \"cap\",\n                        maxWidth: 60,\n                        Cell: ({\n                            row: {\n                                original: { cap }\n                            }\n                        }) => (cap ? humanString(cap) : \"-\")\n                    }\n                ]\n            }\n        ],\n        []\n    );\n\n    const [result, setResult] = useState([]);\n\n    const fetchData = async array => {\n        if (array.length < 1) {\n            setResult([]);\n            return;\n        }\n\n        const production = true;\n\n        const yahoo = await fetch(\n            production\n                ? `https://finance.beuke.org/chart/batch/${array.toString()}`\n                : `https://localhost:3000/chart/batch/${array.toString()}`\n        );\n\n        const abc = (await yahoo.json()).map(x => {\n            const len = x.quote.length;\n            const q = x.quote;\n            return {\n                symbol: x.symbol,\n                fiveYearsPerf: q && len > 19 && x.quote[parseInt(len / 2)],\n                tenYearsPerf: q && len > 39 && x.quote[0]\n            };\n        });\n\n        const response = await fetch(\n            production\n                ? `https://finance.beuke.org/quote/batch/${array.toString()}`\n                : `http://localhost:3000/quote/batch/${array.toString()}`\n        );\n\n        const json = await response.json();\n        setResult(\n            json.map(x => {\n                const hit = abc.filter(y => y.symbol === x.symbol)[0];\n\n                const toPerf = x => y =>\n                    y ? ((x / y) * 100).toFixed(0) + \"%\" : \"-\";\n\n                return {\n                    latestPrice: x.price,\n                    tenYearsPerf: hit ? toPerf(x.price)(hit.tenYearsPerf) : \"-\",\n                    fiveYearsPerf: hit\n                        ? toPerf(x.price)(hit.fiveYearsPerf)\n                        : \"-\",\n                    changePercent: x.change,\n                    change: \"asd\",\n                    week52Low: 0,\n                    week52High: 0,\n                    changeDiff: (x.price - x.prevClose).toFixed(2).toString(),\n                    ...x,\n                    cap:\n                        x.cap !== \"-\"\n                            ? parseFloat(x.cap.slice(0, -1)) * 1000000000\n                            : null\n                };\n            })\n        );\n    };\n\n    const history = useHistory();\n    const path = history.location.pathname.replace(\"wallstreet/\", \"\");\n\n    let array = path.slice(1) ? path.slice(1).split(\",\") : [];\n\n    history.listen(async (location, action) => {\n        let path = history.location.pathname.replace(\"wallstreet/\", \"\");\n\n        let array = path.slice(1) ? path.slice(1).split(\",\") : [];\n        fetchData(array);\n    });\n\n    useEffect(() => {\n        if (array.length > 1) fetchData(array);\n    }, []); // eslint-disable-line\n\n    return (\n        <Styles>\n            <Table columns={columns} defaultPageSize={10} data={result} />\n        </Styles>\n    );\n}\n\nexport default withRouter(App);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport AsyncSelect from \"react-select/async\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n    margin-left: 10%;\n    margin-right: 10%;\n    margin-top: 20px;\n`;\n\nclass Select extends Component<*, State> {\n    state = {\n        inputValue: null,\n        symbols: null,\n        selected: { value: null, label: null }\n    };\n\n    async filterSymbolss(inputValue: string) {\n        if (inputValue.length < 1) return false;\n        return this.state.symbols.filter(i =>\n            i.label.toLowerCase().startsWith(inputValue.toLowerCase())\n        );\n    }\n\n    async componentDidMount() {\n        const symbols = (\n            await axios.get(\"https://finance.beuke.org/symbols\")\n        ).data.map(i => ({ value: i, label: i }));\n        this.setState({ symbols });\n\n        const path = this.props.history.location.pathname.replace(\n            \"wallstreet/\",\n            \"\"\n        );\n\n        // let path = history.location.pathname.replace(\"wallstreet/\", \"\");\n\n        const result = path.slice(1)\n            ? path\n                  .slice(1)\n                  .split(\",\")\n                  .map(x => ({ value: x, label: x }))\n            : [];\n\n        this.setState({\n            techFilter: result.length < 1 ? [] : result\n        });\n    }\n\n    handleInputChange = (newValue: string) => {\n        if (newValue.length < 1) return false;\n        const inputValue = newValue.replace(/\\W/g, \"\");\n        this.setState({ inputValue });\n        return inputValue;\n    };\n\n    textChange = inputValue => {\n        this.setState({ techFilter: inputValue });\n        this.props.history.push(\n            inputValue\n                ? \"/wallstreet/\" + inputValue.map(x => x.value).toString()\n                : \"\"\n        );\n    };\n\n    render() {\n        const promiseOptions = async inputValue =>\n            await this.filterSymbolss(inputValue);\n\n        return (\n            <Styles>\n                <AsyncSelect\n                    isMulti\n                    cacheOptions\n                    value={this.state && this.state.techFilter}\n                    placeholder=\"Stock Symbols\"\n                    onChange={(...args) => this.textChange(...args)}\n                    defaultOptions\n                    loadOptions={promiseOptions}\n                />\n            </Styles>\n        );\n    }\n}\n\nexport default withRouter(Select);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Select from \"./Select\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <div>\n            <Select />\n            <App />\n        </div>\n    </Router>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}